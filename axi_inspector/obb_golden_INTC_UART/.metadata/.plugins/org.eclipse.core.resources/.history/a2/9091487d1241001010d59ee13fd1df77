#include <xuartlite_l.h>
#include <xintc_l.h>
#include <xparameters.h>


#define TEST_BUFFER_SIZE        50

u8 ReceiveBuffer[TEST_BUFFER_SIZE];


struct comando {
	u8 commandReceived[2];
	u8 firstOp[10];
	u8 secondOp[10];
};


unsigned int jj=0;
unsigned int kk=0;
void uart_int_handler(void *baseaddr_p);

struct comando parser( struct comando t, u8* buffer);



/* uartlite interrupt service routine */
void uart_int_handler(void *baseaddr_p) {
	char c;
	c = XUartLite_RecvByte(XPAR_AXI_UARTLITE_0_BASEADDR);
	xil_printf ("0x%x %c \r\n",c, c);
	jj++;
	ReceiveBuffer[jj]=c;
	if ((c==0xD)) {
		xil_printf ("command received!\r\n");
		kk=jj;
		jj=0;

		for(int i=0;i<kk;i++){
				xil_printf("%c",ReceiveBuffer[i]);
		        }


		parser(myComando, ReceiveBuffer[0]);

		for(int i=0;i<TEST_BUFFER_SIZE;i++){
				ReceiveBuffer[i]=0;
		        }

	}
}




int main(void)
{


	/* Enable MicroBlaze exception */
   microblaze_enable_interrupts();
    xil_printf ("####################################################### \r\n");
	xil_printf ("# AXI inspector: \r\n");
	xil_printf ("# Indirizzi e dati sono a 32bit formato HEX: \r\n");
	xil_printf ("# Leggi --->  rd indirizzo \r\n");
	xil_printf ("# Scrivi--->  wr indirizzo dato\r\n");
	   xil_printf ("####################################################### \r\n");
	/* Connect uart interrupt handler that will be called when an interrupt
	* for the uart occurs*/
	XIntc_RegisterHandler(XPAR_INTC_0_BASEADDR,XPAR_AXI_INTC_0_AXI_UARTLITE_0_INTERRUPT_INTR,(XInterruptHandler)uart_int_handler,(void *)XPAR_AXI_UARTLITE_0_BASEADDR);

	/* Start the interrupt controller */
	XIntc_MasterEnable(XPAR_INTC_0_BASEADDR);

	/* Enable uart interrupt in the interrupt controller */
	XIntc_EnableIntr(XPAR_INTC_0_BASEADDR, XPAR_AXI_UARTLITE_0_INTERRUPT_MASK);

	/* Enable Uartlite interrupt */
	XUartLite_EnableIntr(XPAR_AXI_UARTLITE_0_BASEADDR);

	/* Wait for interrupts to occur */
	while (1);
}




struct comando parser( struct comando t, u8* buffer)
{
	int i=0;

	while (i < 2) //TEST_BUFFER_SIZE)
	{
			t.commandReceived[i]=buffer[i];
			i++;
	}

	i++; //salto lo spazio
	int j=0;

	while (i < 13)  // address
		{
			t.firstOp[j]=buffer[i];
			j++;
			i++;
		}

	j=0;
	if (( t.commandReceived[0]='w')&&( t.commandReceived[1]='r'))  // se debbo scrivere serve il dato
	{
		while (i < 26)
			{
				t.secondOp[j]=buffer[i];
				j++;
				i++;
			}
	}

	return t;
}
