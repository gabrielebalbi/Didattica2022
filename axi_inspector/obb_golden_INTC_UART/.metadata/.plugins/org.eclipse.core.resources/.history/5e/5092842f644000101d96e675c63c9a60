#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xparameters.h"
#include "xil_io.h"
#include "xgpio.h"
#include "xintc.h"
#include "xintc_l.h"
#include "xil_exception.h"
#include "microblaze_sleep.h"



#define INTC_DEVICE_ID		  XPAR_INTC_0_DEVICE_ID

#define GPIO_DEVICE_ID		  XPAR_GPIO_0_DEVICE_ID
#define INTC_HANDLER		  XIntc_InterruptHandler

XGpio Gpio;
XIntc Intc; /* The Instance of the Interrupt Controller Driver */

void Init_IO(void);
void Init_IO_uart(void);

int Init_Interrupt(void);
int Init_Interrupt_uart(void);

void InterruptHandler(void *CallbackRef);
void InterruptHandler_uart(void *CallbackRef);


int readXGPIO_regs(u32 moduleId)
{
    xil_printf("GPIO_DATA		0x%x\n\r", Xil_In32((u32)moduleId + 0x0		));
    xil_printf("GPIO_TRI		0x%x\n\r", Xil_In32((u32)moduleId + 0x4		)			);
    xil_printf("GPIO2_DATA		0x%x\n\r", Xil_In32((u32)moduleId + 0x8			)			);
    xil_printf("GPIO2_TRI		0x%x\n\r", Xil_In32((u32)moduleId + 0xC	)	);
    xil_printf("GIER			0x%x\n\r", Xil_In32((u32)moduleId + 0x11C	)	);

    xil_printf("IP IER			0x%x\n\r", Xil_In32((u32)moduleId + 0x128	)	);
    xil_printf("IP ISR			0x%x\n\r \n\r ", Xil_In32((u32)moduleId + 0x120	)	);
    return 0;
}


int readXUart_regs(u32 moduleId)
{
    xil_printf("RX_FIFO		0x%x\n\r", Xil_In32((u32)moduleId + 0x0		));
    xil_printf("TX_FIFO		0x%x\n\r", Xil_In32((u32)moduleId + 0x4		)			);
    xil_printf("STAT_REG		0x%x\n\r", Xil_In32((u32)moduleId + 0x8			)			);
    xil_printf("CTL_REG		0x%x\n\r\n\r", Xil_In32((u32)moduleId + 0xc			)			);
    return 0;
}


int main()
{
    init_platform();

    readXUart_regs(XPAR_AXI_UARTLITE_0_BASEADDR);

    Init_IO();


    readXGPIO_regs(XPAR_GPIO_0_BASEADDR);
    readXUart_regs(XPAR_AXI_UARTLITE_0_BASEADDR);

    Xil_Out32(XPAR_GPIO_0_BASEADDR + 0x11C, 0x80000000);
    Xil_Out32(XPAR_GPIO_0_BASEADDR + 0x128, 0x1);

    xil_printf("GIER			0x%x\n\r", Xil_In32((u32)XPAR_GPIO_0_BASEADDR + 0x11C	)	);
    xil_printf("IP IER			0x%x\n\r", Xil_In32((u32)XPAR_GPIO_0_BASEADDR + 0x128	)	);

    int stat=0;
    stat = Init_Interrupt();

    readXGPIO_regs(XPAR_GPIO_0_BASEADDR);
    readXUart_regs(XPAR_AXI_UARTLITE_0_BASEADDR);

    unsigned int count = 0, sw = 0;

   while(1)
   {
	   //sleep(1);
	   //xil_printf("Count: %u\r\n", count);
	   //count++;
	   //sw = XGpio_DiscreteRead(&Gpio, 2);
	   //xil_printf("Buttons: %u\r\n", sw);
	   //sw = 0;

   }

    cleanup_platform();
    return 0;
}

void Init_IO(void)
{

	int Status;
	Status = XGpio_Initialize(&Gpio, GPIO_DEVICE_ID);
	usleep(100);
	if (Status != XST_SUCCESS) {
		xil_printf("Init GPIO fail\n\r");
	}
	else
	{
		xil_printf("Success: Pushbuttons Initialized\n\r");
	}
	XGpio_SetDataDirection(&Gpio, 1, 0xf);  // Pushbuttons
	usleep(100);
	XGpio_InterruptClear(&Gpio, 0x0);


	Status = XGpio_Initialize(&Gpio, GPIO_DEVICE_ID);
	usleep(100);
	if (Status != XST_SUCCESS) {
		xil_printf("Init GPIO fail\n\r");
	}
	else
	{
		xil_printf("Success: Pushbuttons Initialized\n\r");
	}



}


void Init_IO_uart(void)
{

	int Status;
	Status = XGpio_Initialize(&Gpio, GPIO_DEVICE_ID);
	usleep(100);
	if (Status != XST_SUCCESS) {
		xil_printf("Init GPIO fail\n\r");
	}
	else
	{
		xil_printf("Success: Pushbuttons Initialized\n\r");
	}


}



int Init_Interrupt(void)
{
	int stat;

	microblaze_enable_interrupts();
	stat = XIntc_Initialize(&Intc, INTC_DEVICE_ID);
	usleep(100);
	xil_printf("Initialize Intc: %u\n\r", stat);

    readXGPIO_regs(XPAR_GPIO_0_BASEADDR);

    stat = XIntc_Connect(&Intc, XPAR_AXI_INTC_0_AXI_GPIO_0_IP2INTC_IRPT_INTR, (XInterruptHandler)InterruptHandler, (void*) 0);
	usleep(100);
	xil_printf("Connecting Intc with code: %u\n\r", stat);


    readXGPIO_regs(XPAR_GPIO_0_BASEADDR);

	usleep(100);
	XIntc_Enable(&Intc, XPAR_AXI_INTC_0_AXI_GPIO_0_IP2INTC_IRPT_INTR); //This works intermittently
	xil_printf("Enabling Intc \n\r");

    readXGPIO_regs(XPAR_GPIO_0_BASEADDR);

	usleep(100);
	XIntc_Start(&Intc, XIN_REAL_MODE);
	xil_printf("Starting Intc \n\r");

    readXGPIO_regs(XPAR_GPIO_0_BASEADDR);

	XIntc_MasterEnable(&Intc);
	xil_printf("Enable Master \n\r");

    readXGPIO_regs(XPAR_GPIO_0_BASEADDR);

	Xil_ExceptionInit();
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_M_AXI_I_EXCEPTION, (XExceptionHandler)INTC_HANDLER, &Intc);
	xil_printf("Enable Exceptions \n\r");
	Xil_ExceptionEnable();

	XGpio_InterruptEnable(&Gpio, 0x3);
	usleep(100);
	XGpio_InterruptGlobalEnable(&Gpio);
	usleep(100);
	return stat;

}

int Init_Interrupt_uart(void)
{
	int stat;

	microblaze_enable_interrupts();
	stat = XIntc_Initialize(&Intc, INTC_DEVICE_ID);
	usleep(100);
	xil_printf("Initialize Intc: %u\n\r", stat);

	readXUart_regs(XPAR_AXI_UARTLITE_0_BASEADDR);

    stat = XIntc_Connect(&Intc, XPAR_AXI_INTC_0_AXI_UARTLITE_0_INTERRUPT_INTR, (XInterruptHandler)InterruptHandler_uart, (void*) 0);
	usleep(100);
	xil_printf("Connecting Intc with code: %u\n\r", stat);


	readXUart_regs(XPAR_AXI_UARTLITE_0_BASEADDR);
	usleep(100);

	XIntc_Enable(&Intc, XPAR_AXI_INTC_0_AXI_UARTLITE_0_INTERRUPT_INTR); //This works intermittently
	xil_printf("Enabling Intc \n\r");

	readXUart_regs(XPAR_AXI_UARTLITE_0_BASEADDR);
	usleep(100);
	XIntc_Start(&Intc, XIN_REAL_MODE);
	xil_printf("Starting Intc \n\r");

	readXUart_regs(XPAR_AXI_UARTLITE_0_BASEADDR);
	XIntc_MasterEnable(&Intc);
	xil_printf("Enable Master \n\r");

	readXUart_regs(XPAR_AXI_UARTLITE_0_BASEADDR);
	Xil_ExceptionInit();
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_M_AXI_I_EXCEPTION, (XExceptionHandler)INTC_HANDLER, &Intc);
	xil_printf("Enable Exceptions \n\r");
	Xil_ExceptionEnable();

	return stat;

}


void InterruptHandler(void *CallbackRef)
{
	unsigned int sw = 0;
	sw = XGpio_DiscreteRead(&Gpio, 2);
	xil_printf("DEMETRA DAI!!!!!!!!!!!! %d \n\r", sw);
	XGpio_InterruptClear(&Gpio, 0x3);
	XIntc_Acknowledge(&Intc, XPAR_AXI_INTC_0_AXI_GPIO_0_IP2INTC_IRPT_INTR);

}


void InterruptHandler_uart(void *CallbackRef)
{
	unsigned int sw = 0;
	xil_printf("DEMETRA DAI!!!!!!!!!!!! %d \n\r", sw);
	XGpio_InterruptClear(&Gpio, 0x3);
	XIntc_Acknowledge(&Intc, XPAR_AXI_INTC_0_AXI_GPIO_0_IP2INTC_IRPT_INTR);

}

