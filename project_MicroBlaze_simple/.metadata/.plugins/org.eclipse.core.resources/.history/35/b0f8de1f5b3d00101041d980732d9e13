/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"

#include <stdio.h>
#include "xparameters.h"
#include "xil_cache.h"
#include "xintc.h"
#include "xgpio.h"
#include "xil_io.h"

#include "gpio_header.h"
#include "intc_header.h"

#include "mmcm_reconfig.h"
#include "uart_comm.h"

/************************** Variable Definitions *****************************/
 XUartLite UartLite;             /* The instance of the UartLite Device */
 XUartLite_Config *UartLite_Cfg; /* The instance of the UartLite Config */
 XIntc InterruptController;      /* The instance of the Interrupt Controller */





u8 SendBuffer[TEST_BUFFER_SIZE];
u8 ReceiveBuffer[TEST_BUFFER_SIZE];
/* Here are the pointers to the buffer */
u8* ReceiveBufferPtr = &ReceiveBuffer[0];



int main()
{
    init_platform();

    int Status=0;

    //Set up the UART and configure the interrupt handler for bytes in RX buffer
    Status = SetupUartLite(XPAR_UARTLITE_0_DEVICE_ID);

    if (Status != XST_SUCCESS) {
           return XST_FAILURE;


    }
    else
            	   print("qui ok \n\r");

    //Get a reference pointer to the Uart Configuration
    UartLite_Cfg = XUartLite_LookupConfig(XPAR_UARTLITE_0_DEVICE_ID);

    //Print out the info about our XUartLite instance
    xil_printf("\n\r");
    xil_printf("Serial Port Properties ------------------\n\r");
    xil_printf("Device ID : %d\n\r", UartLite_Cfg->DeviceId);
    xil_printf("Baud Rate : %d\n\r", UartLite_Cfg->BaudRate);
    xil_printf("Data Bits : %d\n\r", UartLite_Cfg->DataBits);
    xil_printf("Base Addr : %08X\n\r", UartLite_Cfg->RegBaseAddr);
    xil_printf("\n\r");


    print("\n\r");
    print("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n\r");
    print("@@@@@ Programma riconfigurazione MMCM Artix 7        @@@@@\n\r");
    print("@@@@@ L'MMCM ha 2 uscite : clk1 e clk2               @@@@@\n\r");
    print("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n\r");


    print("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n\r");
    print("@@@@@ seleziona il clk su cui lavorare:   clk1/clk2  @@@@@\n\r");
    print("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n\r");



    print("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n\r");

    readConfiguration_AXI_LITE(XPAR_CLK_WIZ_0_BASEADDR); //XPAR_CLK_WIZ_0_DEVICE_ID);

    readConfigurationDPR(XPAR_CLK_WIZ_0_DEVICE_ID); //XPAR_CLK_WIZ_0_DEVICE_ID);

    //sendConfiguration(XPAR_CLK_WIZ_0_DEVICE_ID);

    unsigned char inp;

    while (1)
    {
       // inp=XUartLite_RecvByte(XPAR_UARTLITE_0_BASEADDR);      // reading from hyperterminal
    	//xil_printf("Hai pigiato questo char %c \r\n", inp);
    }
    print("Fine")
    ;
    cleanup_platform();
    return 0;
}
