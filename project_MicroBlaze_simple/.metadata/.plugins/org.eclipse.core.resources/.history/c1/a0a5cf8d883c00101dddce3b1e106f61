/*
 * uart_comm.c
 *
 *  Created on: 29 mag 2025
 *      Author: balbi
 */

#include "uart_comm.h"


XUartLite UartLite;             /* The instance of the UartLite Device */
 XUartLite_Config *UartLite_Cfg; /* The instance of the UartLite Config */
 XIntc InterruptController;      /* The instance of the Interrupt Controller */




void RecvHandler(void *CallBackRef, unsigned int EventData)
{
	XUartLite_Recv(&UartLite, ReceiveBuffer, 1); // Get ready to receive 1st byte
	if(ReceiveBuffer[0] == 'f') //Look at the start of the message to determine the remaining bytes.
	{
		for(int i=1;i<6;i++){
			ReceiveBuffer[i]=XUartLite_RecvByte(XPAR_UARTLITE_0_BASEADDR);
		}
	}

	printBuffer(); // print the contents of the buffer.
	XUartLite_ResetFifos(&UartLite); // Reset the FIFOs
	resetBuffer(); // Reset the contents of the buffer.
}

void SendHandler(void *CallBackRef, unsigned int EventData)
{
    TotalSentCount = EventData;
}


void resetBuffer()
	{
		for(int i=0;i<TEST_BUFFER_SIZE;i++){
		ReceiveBuffer[i]=0;
	}
}

void printBuffer()
{
    //return the message
    XUartLite_Send(&UartLite,&ReceiveBuffer[0],6);
}

int SetupInterruptSystem(XUartLite *UartLitePtr)
{

    int Status;

    /*
     * Initialize the interrupt controller driver so that it is ready to
     * use.
     */
    Status = XIntc_Initialize(&InterruptController, XPAR_AXI_INTC_0_DEVICE_ID);
    if (Status != XST_SUCCESS) {
        return XST_FAILURE;
    }

    /*
     * Connect a device driver handler that will be called when an interrupt
     * for the device occurs, the device driver handler performs the
     * specific interrupt processing for the device.
     */
    Status = XIntc_Connect(&InterruptController, XPAR_INTC_0_UARTLITE_0_VEC_ID,
               (XInterruptHandler)XUartLite_InterruptHandler,
               (void *)UartLitePtr);
    if (Status != XST_SUCCESS) {
        return XST_FAILURE;
    }

    /*
     * Start the interrupt controller such that interrupts are enabled for
     * all devices that cause interrupts, specific real mode so that
     * the UartLite can cause interrupts through the interrupt controller.
     */
    Status = XIntc_Start(&InterruptController, XIN_REAL_MODE);
    if (Status != XST_SUCCESS) {
        return XST_FAILURE;
    }

    /*
     * Enable the interrupt for the UartLite device.
     */
    XIntc_Enable(&InterruptController, XPAR_INTC_0_UARTLITE_0_VEC_ID);

    /*
     * Initialize the exception table.
     */
    Xil_ExceptionInit();

    /*
     * Register the interrupt controller handler with the exception table.
     */
    Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
             (Xil_ExceptionHandler)XIntc_InterruptHandler,
             &InterruptController);

    /*
     * Enable exceptions.
     */
    Xil_ExceptionEnable();

    return XST_SUCCESS;
}
