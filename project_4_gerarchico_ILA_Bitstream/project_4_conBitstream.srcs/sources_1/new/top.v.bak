`timescale 1ns / 1ps
	
module top(btn0, clk, S);

   
   input clk;
   
   input btn0;
   
   output [3:0] S;

   reg [3:0]   A_i,B_i, S;
   
   reg btn0_i;
   wire   edge_detected;
   
   wire [2:0]   C;
   wire [3:0] S_i;


   reg [3:0] A = 4'b1001; //9
   reg [3:0] B = 4'b0011; //3



	always @ (posedge  clk)	
	begin		
		btn0_i<=btn0;
	end

	assign edge_detected = btn0 & (~btn0_i);


	always @ (posedge  clk)	
	begin
		
		if (edge_detected) begin
			A_i=A;
			B_i=B;
		end		
	end
	
	
//You can only assign a value to a reg within a procedural always block. 
//You can not drive a reg from a module instance. That would be a continuous assignment.

   full_add add_0 (.sum(S_i[0]), .c_out (C[0]), .c_in(1'b0), .a(A_i[0]), .b(B_i[0]));
   full_add add_1 (.sum(S_i[1]), .c_out (C[1]), .c_in(C[0]), .a(A_i[1]), .b(B_i[1]));
   full_add add_2 (.sum(S_i[2]), .c_out (C[2]), .c_in(C[1]), .a(A_i[2]), .b(B_i[2]));
   full_add add_3 (.sum(S_i[3]),                .c_in(C[2]), .a(A_i[3]), .b(B_i[3]));
	//   assign S=S_i;

	always@( posedge clk)
	begin
		S<=S_i;
	end;

	
endmodule // add_ger


	

